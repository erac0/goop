Field
defines Nodes
which have Named Items

each Item may implement Connectable,
which means it can get notified when things Connect to it
and when things Disconnect from it.

That notification includes the type of Connection/Disconnection
and the other Item involved in the transaction...

Concretely, we have
 - Generators: receive Events and CEvents; send Audio
 - Effects: receive Events, CEvents and Audio; send Audio
 - Mixer: receive Events, CEvents and Audio; send nothing
 - that's all.

If an Item receives Events,
it updates its internal state
generally changing parameters to adjust its behavior.

If an Item receives CEvents,
it updates its internal state
generally adjusting the number of output channels it must oversee.
We can't have multiple independent Audio channels
generating totally unique streams of Audio data.
Instead we must fill all of our Audio channels
with the same Audio, at generation-time,
and if the (buffered) channel is full, simply skip it.
Then we rely on the consuming Item
to empty the buffer on a timely schedule.

 downstream Item     Item
 ---------------     ----
        |--AudioOut-->|
        |             |--. new Audio channel added to map
        |             |<-' (keyed on the Name of the Item?)
        |<----chan----|
                      路
                      路
                      |--. generatorLoop loops thru all Audio channels
                      |  | attempts to buffer the current buffer
                      |<-' if it fails, give up
       --CEvent       路
         Disconnect   路
         from below-->|
                      |--. get the other Item's key somehow
                      |<-' remove that entry from the Audio channel map

The problem with this model is it's not symmetric.
An AudioOut() call generates a new channel,
while a CEvent-Disconnect kills it.

It may be smarter to keep the Items (Modules) quite simple, conceptually.
Publishing only to a single Channel.
And implement the multiplexing logic in another conceptual layer.
The idea of an explicit Splitter Module.

Then, the Field is no longer generally N-ary,
but rather only N-ary if the Item allows more than 1 Connection.
Or, more generally:
The number of Connections that an Item may receive,
or the number of Connections that may be made from an Item,
are both assumed to be 1,
unless the module provides a Multiplexable interface
in which case it's MaxIncoming() and MaxOutgoing().

But is the Field the right place to put that information?
If so, we ought to shift as much burden into the Field as possible.
If not, is the Field a needless abstraction?

The problem here is extending whatever abstraction
to accomodate the idea of an N-ary graph.
That complicates all of the Connection and generation logic.
If we reduce the Field to a Bank
and only allow single Direct connections
(and maybe implement a Clone method at the UI layer)
we eliminate a lot of complexity.

Begin speculative nonsense.

 +---+
 | a |o  +---+
 +---+  i| b |o  +---+ 
         +---+  i| c |o  +---+
                 +---+  i| M |
                         +---+

What if the problem is insufficient specificity in the modules?
Specifically, identifying modules at the command line simply by their name
and using the context of the command
to deduce which Port the connection is meant to refer to.

If every Module provided a set of identifiable (named) ports
which must be explicitly specified to make Connect commands...
Things may be easier.

This is the same model used by GUI audio networks like Csound, ultimately.
The user wires together modules according to the specific ports...

That turns the Wires back into explicit Items in the Field (Field-equivalent).
Unless we make all Input ports take a channel as a parameter, ie.
  
  func (p *Port) SetInput(c <-chan []float32) bool
  func (p *Port) GetOutput() c <-chan []float32